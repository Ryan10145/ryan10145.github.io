<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://ryan10145.github.io/</id><title>Ryan Chang</title><subtitle>Personal website and blog for student studying computer science</subtitle> <updated>2021-05-17T20:32:30-04:00</updated> <author> <name>Ryan Chang</name> <uri>https://ryan10145.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://ryan10145.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="https://ryan10145.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 Ryan Chang </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Solving Linear Recurrences</title><link href="https://ryan10145.github.io/posts/recurrences/" rel="alternate" type="text/html" title="Solving Linear Recurrences" /><published>2021-05-10T17:30:00-04:00</published> <updated>2021-05-10T17:30:00-04:00</updated> <id>https://ryan10145.github.io/posts/recurrences/</id> <content src="https://ryan10145.github.io/posts/recurrences/" /> <author> <name>Ryan Chang</name> </author> <category term="Math Articles" /> <summary> In this article, we’ll discuss how to solve both homogenous and non-homogenous linear recurrences with constant coefficients. If you already know what linear recurrences are and all of the vocabulary surrounding them, feel free to just skip to the next section to see how to solve homogenous and non-homogenous linear recurrences. If you’re unfamilar with some of these terms, the first section go... </summary> </entry> <entry><title>Modular Inverses</title><link href="https://ryan10145.github.io/posts/modular-inverses/" rel="alternate" type="text/html" title="Modular Inverses" /><published>2021-04-19T11:15:00-04:00</published> <updated>2021-04-19T11:15:00-04:00</updated> <id>https://ryan10145.github.io/posts/modular-inverses/</id> <content src="https://ryan10145.github.io/posts/modular-inverses/" /> <author> <name>Ryan Chang</name> </author> <category term="Math Articles" /> <summary> This post assumes a basic knowledge of modular arithmetic and the notation for it. In this article, we will use the following notation to denote $b$ as the remainder when $a$ is divided by $n$. $$a \equiv b \pmod{n} $$ We will also less frequently use the notation $a\ \%\ n = c$ to denote the same thing. Division in Modular Arithmetic For modular arithmetic, the operations of addition, ... </summary> </entry> <entry><title>Binary Exponentiation</title><link href="https://ryan10145.github.io/posts/binary-exponentiation/" rel="alternate" type="text/html" title="Binary Exponentiation" /><published>2021-04-19T11:00:00-04:00</published> <updated>2021-04-19T11:00:00-04:00</updated> <id>https://ryan10145.github.io/posts/binary-exponentiation/</id> <content src="https://ryan10145.github.io/posts/binary-exponentiation/" /> <author> <name>Ryan Chang</name> </author> <category term="Math Articles" /> <summary> Typical Exponentiation Let’s say you wanted to calculate the large power of a number modulo another, such as \[7^{39} \pmod{1000}\] The most naive way to do this would be to literally multiply $7$ by itself $39$ times and then take the remainder when divided by $1000$, aka the last $3$ digits. However, this technique quickly becomes unmanageable, especially since $7^{39}$ has $32$ digits, wh... </summary> </entry> <entry><title>Roots of Unity Filter Part 3 - Roots of Unity Filter</title><link href="https://ryan10145.github.io/posts/roots-of-unity-filter/" rel="alternate" type="text/html" title="Roots of Unity Filter Part 3 - Roots of Unity Filter" /><published>2021-04-18T15:15:00-04:00</published> <updated>2021-05-04T23:06:30-04:00</updated> <id>https://ryan10145.github.io/posts/roots-of-unity-filter/</id> <content src="https://ryan10145.github.io/posts/roots-of-unity-filter/" /> <author> <name>Ryan Chang</name> </author> <category term="Math Articles" /> <category term="Roots of Unity Filter" /> <summary> Note This is a three part series I wrote back in 2019 on a technique applicable to certain competitive math problems: roots of unity filters. See the first two parts for a recap of complex numbers and roots of unity respectively. This post will actually go over the technique as well as what kind of problems it can be applied to. Many of the explanations for this section will not be rigorous... </summary> </entry> <entry><title>Roots of Unity Filter Part 2 - Roots of Unity</title><link href="https://ryan10145.github.io/posts/roots-of-unity/" rel="alternate" type="text/html" title="Roots of Unity Filter Part 2 - Roots of Unity" /><published>2021-04-18T15:00:00-04:00</published> <updated>2021-04-19T16:14:49-04:00</updated> <id>https://ryan10145.github.io/posts/roots-of-unity/</id> <content src="https://ryan10145.github.io/posts/roots-of-unity/" /> <author> <name>Ryan Chang</name> </author> <category term="Math Articles" /> <category term="Roots of Unity Filter" /> <summary> Note This is a three part series I wrote back in 2019 on a technique applicable to certain competitive math problems: roots of unity filters. The first two parts are just a recap of complex numbers and roots of unity respectively. If you’re already comfortable with both of these topics, feel free to skip to Part 3. Basics The $n$th roots of unity for a positive integer $n$ are all of the c... </summary> </entry> </feed>
